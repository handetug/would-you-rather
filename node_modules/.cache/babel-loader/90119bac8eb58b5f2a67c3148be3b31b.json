{"ast":null,"code":"var _jsxFileName = \"/Users/fordotosandevteam/would-you-rather-app/src/components/QuestionPoll.js\";\nimport React, { Component } from 'react';\nimport Question from './Question';\nimport Result from './Result';\nimport ErrorPage from './ErrorPage';\nimport Login from './Login';\nimport { connect } from 'react-redux';\n\nclass QuestionPoll extends Component {\n  render() {\n    const _this$props = this.props,\n          isError = _this$props.isError,\n          isAnswered = _this$props.isAnswered,\n          id = _this$props.id,\n          authedUser = _this$props.authedUser;\n\n    if (authedUser === null) {\n      return React.createElement(Login, {\n        id: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      });\n    } // This If-Else logic created to handle init time of questions array to store. It occurs only when refresh \"/questions:id\" URL.\n\n\n    if (isError && isAnswered === null) {\n      return React.createElement(ErrorPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      });\n    } else if (isAnswered !== null) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, !isAnswered ? React.createElement(Question, {\n        id: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }) : React.createElement(Result, {\n        id: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }\n\n}\n\nfunction mapStateToProps({\n  questions,\n  authedUser\n}, props) {\n  const id = props.match.params.id;\n  const question = questions[id];\n  return {\n    isError: Object.entries(questions).length !== 0,\n    isAnswered: question ? question.optionOne.votes.includes(authedUser) || question.optionTwo.votes.includes(authedUser) : null,\n    id,\n    authedUser\n  };\n}\n\nexport default connect(mapStateToProps)(QuestionPoll);","map":{"version":3,"sources":["/Users/fordotosandevteam/would-you-rather-app/src/components/QuestionPoll.js"],"names":["React","Component","Question","Result","ErrorPage","Login","connect","QuestionPoll","render","props","isError","isAnswered","id","authedUser","mapStateToProps","questions","match","params","question","Object","entries","length","optionOne","votes","includes","optionTwo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AAEpCO,EAAAA,MAAM,GAAG;AAAA,wBACwC,KAAKC,KAD7C;AAAA,UACAC,OADA,eACAA,OADA;AAAA,UACSC,UADT,eACSA,UADT;AAAA,UACqBC,EADrB,eACqBA,EADrB;AAAA,UACyBC,UADzB,eACyBA,UADzB;;AAGR,QAAIA,UAAU,KAAK,IAAnB,EAAyB;AACxB,aAAO,oBAAC,KAAD;AAAO,QAAA,EAAE,EAAED,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACA,KALO,CAOR;;;AACA,QAAIF,OAAO,IAAIC,UAAU,KAAK,IAA9B,EAAoC;AACnC,aAAQ,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACA,KAFD,MAGK,IAAIA,UAAU,KAAK,IAAnB,EAAyB;AAC7B,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,CAACA,UAAD,GACG,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAEC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,GAEG,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAEA,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHL,CADD;AAOA,KARI,MASA;AACJ,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAR;AACA;AACD;;AAzBmC;;AA4BrC,SAASE,eAAT,CAAyB;AAAEC,EAAAA,SAAF;AAAaF,EAAAA;AAAb,CAAzB,EAAoDJ,KAApD,EAA2D;AAAA,QAClDG,EADkD,GAC3CH,KAAK,CAACO,KAAN,CAAYC,MAD+B,CAClDL,EADkD;AAE1D,QAAMM,QAAQ,GAAGH,SAAS,CAACH,EAAD,CAA1B;AAEA,SAAO;AACNF,IAAAA,OAAO,EAAES,MAAM,CAACC,OAAP,CAAeL,SAAf,EAA0BM,MAA1B,KAAqC,CADxC;AAENV,IAAAA,UAAU,EAAEO,QAAQ,GACjBA,QAAQ,CAACI,SAAT,CAAmBC,KAAnB,CAAyBC,QAAzB,CAAkCX,UAAlC,KACFK,QAAQ,CAACO,SAAT,CAAmBF,KAAnB,CAAyBC,QAAzB,CAAkCX,UAAlC,CAFmB,GAGjB,IALG;AAMND,IAAAA,EANM;AAONC,IAAAA;AAPM,GAAP;AASA;;AAED,eAAeP,OAAO,CAACQ,eAAD,CAAP,CAAyBP,YAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Question from './Question';\nimport Result from './Result';\nimport ErrorPage from './ErrorPage';\nimport Login from './Login';\nimport { connect } from 'react-redux';\n\nclass QuestionPoll extends Component {\n\n\trender() {\n\t\tconst { isError, isAnswered, id, authedUser } = this.props;\n\n\t\tif (authedUser === null) { \n\t\t\treturn <Login id={id} />\n\t\t}\n\n\t\t// This If-Else logic created to handle init time of questions array to store. It occurs only when refresh \"/questions:id\" URL.\n\t\tif (isError && isAnswered === null) {\n\t\t\treturn (<ErrorPage />)\n\t\t}\n\t\telse if (isAnswered !== null) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t{!isAnswered\n\t\t\t\t\t\t? (<Question id={id} />)\n\t\t\t\t\t\t: (<Result id={id} />)}\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\treturn (<div>Loading...</div>)\n\t\t}\n\t}\n}\n\nfunction mapStateToProps({ questions, authedUser }, props) {\n\tconst { id } = props.match.params;\n\tconst question = questions[id];\n\n\treturn {\n\t\tisError: Object.entries(questions).length !== 0,\n\t\tisAnswered: question\n\t\t\t? question.optionOne.votes.includes(authedUser) ||\n\t\t\tquestion.optionTwo.votes.includes(authedUser)\n\t\t\t: null,\n\t\tid,\n\t\tauthedUser,\n\t}\n}\n\nexport default connect(mapStateToProps)(QuestionPoll);"]},"metadata":{},"sourceType":"module"}